"use client";

import type { Metadata } from "next";
import { Poppins } from "next/font/google";
import "./globals.css";
import Navbar from "@/components/Navbar";
import clsx from "clsx";
import QueryProvider from "@/components/QueryProvider";

import { Toaster } from "sonner";
import { useEffect } from "react";
import axios from "axios";
import useStore from "@/lib/store-manage";
import { useRouter } from "next/navigation";

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700", "900"],
  variable: "--font-poppins",
});

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const { user, deleteUser } = useStore();
  useEffect(() => {
    const checkToken = async () => {
      try {
        const response = await axios.get(
          `${process.env.NEXT_PUBLIC_IBENDOUMA_CLIENT_URL}/checkToken`,
          { withCredentials: true }
        );

        if (response.status !== 200 || !response.data.user) {
          deleteUser();
          await axios({
            method: "get",
            url: `${process.env.NEXT_PUBLIC_IBENDOUMA_CLIENT_URL}/users/logout`,
            withCredentials: true,
          });
          router.push("/"); // Rediriger vers la page de connexion
        }
      } catch (error) {
        await axios({
          method: "get",
          url: `${process.env.NEXT_PUBLIC_IBENDOUMA_CLIENT_URL}/users/logout`,
          withCredentials: true,
        });
        deleteUser();
        // console.log("Token invalid or error occurred, logging out.");
        router.push("/");
      }
    };
    if (user) {
      checkToken();
    }
  }, [router, user]);

  return (
    <html lang="en">
      <body
        className={clsx(
          poppins.variable,
          "w-full h-full antialiased font-sans"
        )}
      >
        <div className="relative w-full h-full home-all">
          <QueryProvider>
            <Navbar />
            <Toaster />
            {children}
          </QueryProvider>
        </div>
      </body>
    </html>
  );
}
